{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _nodeHtmlParser = require(\"node-html-parser\");\n\nvar _constants = require(\"./constants\");\n\nvar MIDDLEWARE_TIME_BUDGET = 10;\nvar middlewareRegistry = [];\n\nfunction registerPostProcessor(name, middleware, condition) {\n  middlewareRegistry.push({\n    name: name,\n    middleware: middleware,\n    condition: condition || null\n  });\n}\n\nfunction processHTML(_x, _x2, _x3) {\n  return _processHTML.apply(this, arguments);\n}\n\nfunction _processHTML() {\n  _processHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(html, data, options) {\n    var postProcessData, root, document, callMiddleWare, _callMiddleWare, i, middleware;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _callMiddleWare = function _callMiddleWare3() {\n              _callMiddleWare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(middleware, name) {\n                var timer, inspectTime;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        timer = Date.now();\n                        middleware.inspect(root, postProcessData, data);\n                        inspectTime = Date.now() - timer;\n                        _context2.next = 5;\n                        return middleware.mutate(document, postProcessData, data);\n\n                      case 5:\n                        document = _context2.sent;\n                        timer = Date.now() - timer;\n\n                        if (timer > MIDDLEWARE_TIME_BUDGET) {\n                          console.warn(\"The postprocess middleware \\\"\".concat(name, \"\\\" took \").concat(timer, \"ms(\").concat(inspectTime, \", \").concat(timer - inspectTime, \") to complete. This is longer than the \").concat(MIDDLEWARE_TIME_BUDGET, \" limit.\"));\n                        }\n\n                        return _context2.abrupt(\"return\");\n\n                      case 9:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            callMiddleWare = function _callMiddleWare2(_x7, _x8) {\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            if (middlewareRegistry[0]) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", html);\n\n          case 4:\n            postProcessData = {\n              preloads: {\n                images: []\n              }\n            };\n            root = (0, _nodeHtmlParser.parse)(html);\n            document = html; // Calls the middleware, with some instrumentation and logging\n\n            i = 0;\n\n          case 8:\n            if (!(i < middlewareRegistry.length)) {\n              _context3.next = 16;\n              break;\n            }\n\n            middleware = middlewareRegistry[i];\n\n            if (!(!middleware.condition || middleware.condition(options))) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 13;\n            return callMiddleWare(middlewareRegistry[i].middleware, middlewareRegistry[i].name);\n\n          case 13:\n            i++;\n            _context3.next = 8;\n            break;\n\n          case 16:\n            return _context3.abrupt(\"return\", document);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _processHTML.apply(this, arguments);\n}\n\nvar FontOptimizerMiddleware = /*#__PURE__*/function () {\n  function FontOptimizerMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, FontOptimizerMiddleware);\n\n    this.fontDefinitions = [];\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(markup, _data, options) {\n        var result, key, url, fontContent;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = markup;\n\n                if (options.getFontDefinition) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", markup);\n\n              case 3:\n                _context.t0 = _regeneratorRuntime.keys(_this.fontDefinitions);\n\n              case 4:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n\n                key = _context.t1.value;\n                url = _this.fontDefinitions[key];\n\n                if (!(result.indexOf(\"<style data-href=\\\"\".concat(url, \"\\\">\")) > -1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 4);\n\n              case 9:\n                fontContent = options.getFontDefinition(url);\n                result = result.replace('</head>', \"<style data-href=\\\"\".concat(url, \"\\\">\").concat(fontContent.replace(/(\\n|\\s)/g, ''), \"</style></head>\"));\n                _context.next = 4;\n                break;\n\n              case 13:\n                return _context.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(FontOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data, options) {\n      var _this2 = this;\n\n      if (!options.getFontDefinition) {\n        return;\n      } // collecting all the requested font definitions\n\n\n      originalDom.querySelectorAll('link').filter(function (tag) {\n        return tag.getAttribute('rel') === 'stylesheet' && tag.hasAttribute('data-href') && _constants.OPTIMIZED_FONT_PROVIDERS.some(function (url) {\n          return tag.getAttribute('data-href').startsWith(url);\n        });\n      }).forEach(function (element) {\n        var url = element.getAttribute('data-href');\n\n        _this2.fontDefinitions.push(url);\n      });\n    }\n  }]);\n\n  return FontOptimizerMiddleware;\n}(); // Initialization\n\n\nregisterPostProcessor('Inline-Fonts', new FontOptimizerMiddleware(), // Using process.env because passing Experimental flag through loader is not possible.\n// @ts-ignore\nfunction (options) {\n  return options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS;\n});\nvar _default = processHTML;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../next-server/lib/post-process.ts"],"names":["MIDDLEWARE_TIME_BUDGET","middlewareRegistry","name","middleware","condition","postProcessData","preloads","images","root","document","timer","Date","inspectTime","console","i","callMiddleWare","FontOptimizerMiddleware","inspect","options","originalDom","tag","OPTIMIZED_FONT_PROVIDERS","url","element","result","fontContent","registerPostProcessor","process","processHTML"],"mappings":"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","sourcesContent":["import { parse, HTMLElement } from 'node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\nconst MIDDLEWARE_TIME_BUDGET = 10\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\n\ntype postProcessData = {\n  preloads: {\n    images: Array<string>\n  }\n}\n\ninterface PostProcessMiddleware {\n  inspect: (\n    originalDom: HTMLElement,\n    data: postProcessData,\n    options: renderOptions\n  ) => void\n  mutate: (\n    markup: string,\n    data: postProcessData,\n    options: renderOptions\n  ) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const postProcessData: postProcessData = {\n    preloads: {\n      images: [],\n    },\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(\n    middleware: PostProcessMiddleware,\n    name: string\n  ) {\n    let timer = Date.now()\n    middleware.inspect(root, postProcessData, data)\n    const inspectTime = Date.now() - timer\n    document = await middleware.mutate(document, postProcessData, data)\n    timer = Date.now() - timer\n    if (timer > MIDDLEWARE_TIME_BUDGET) {\n      console.warn(\n        `The postprocess middleware \"${name}\" took ${timer}ms(${inspectTime}, ${\n          timer - inspectTime\n        }) to complete. This is longer than the ${MIDDLEWARE_TIME_BUDGET} limit.`\n      )\n    }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(\n        middlewareRegistry[i].middleware,\n        middlewareRegistry[i].name\n      )\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  fontDefinitions: Array<string> = []\n  inspect(\n    originalDom: HTMLElement,\n    _data: postProcessData,\n    options: renderOptions\n  ) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some((url) =>\n            tag.getAttribute('data-href').startsWith(url)\n          )\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        this.fontDefinitions.push(url)\n      })\n  }\n  mutate = async (\n    markup: string,\n    _data: postProcessData,\n    options: renderOptions\n  ) => {\n    let result = markup\n    if (!options.getFontDefinition) {\n      return markup\n    }\n    for (const key in this.fontDefinitions) {\n      const url = this.fontDefinitions[key]\n      if (result.indexOf(`<style data-href=\"${url}\">`) > -1) {\n        // The font is already optimized and probably the response is cached\n        continue\n      }\n      const fontContent = options.getFontDefinition(url)\n      result = result.replace(\n        '</head>',\n        `<style data-href=\"${url}\">${fontContent.replace(\n          /(\\n|\\s)/g,\n          ''\n        )}</style></head>`\n      )\n    }\n    return result\n  }\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nexport default processHTML\n"]},"metadata":{},"sourceType":"script"}